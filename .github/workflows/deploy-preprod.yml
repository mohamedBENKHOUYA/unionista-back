name: CI - PREPROD-BACK
on:
  push:
    branches: [dev]

jobs:
  deploy:
    environment: preprod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$PREPROD_SSH_KEY" > ./deploy.key
          sudo chmod 600 ./deploy.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        shell: bash
        env:
          PREPROD_SSH_KEY: ${{secrets.PREPROD_SSH_KEY}}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}


      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: build back
        run: |
          npm i
          npm run build
      - name: build back image
        run: docker build -t mo29172/unionista_back:v${{ github.run_number }} -f docker/back/Dockerfile .
      - name: push back image to docker hub
        run: |
          docker push mo29172/unionista_back:v${{ github.run_number }}
      - name: update back deployment file version
        run: |
          sed -i -e"s/:latest/:v${{ github.run_number }}/" docker/k8s/back-deployment.yaml


      - name: build nginx image
        run: |
          docker build -t mo29172/unionista_nginx:v${{ github.run_number }} -f docker/nginx/Dockerfile .
      - name: push nginx image to docker hub
        run: |
          docker push mo29172/unionista_nginx:v${{ github.run_number }}
      - name: update nginx deployment file version
        run: |
          sed -i -e"s/:latest/:v${{ github.run_number }}/" docker/k8s/nginx-deployment.yaml


      - name: copy k8s files via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PREPROD_HOST }}
          username: ${{ secrets.PREPROD_USER }}
          key: ${{ secrets.PREPROD_SSH_KEY }}
          source: 'docker/k8s/nginx-node-port.yaml,docker/k8s/nginx-deployment.yaml,docker/k8s/back-deployment.yaml,docker/k8s/db-deployment.yaml,docker/k8s/db-cluster-ip-service.yaml,docker/k8s/back-cluster-ip-service.yaml,docker/k8s/db-persistent-volume-claim.yaml'
          target: '/srv/k8s'
          strip_components: 2

      - name: apply k8s files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PREPROD_HOST }}
          username: ${{ secrets.SSH_SECOND_USER }}
          password: ${{ secrets.PREPROD_PASSWORD }}
          script: |
            kubectl create secret generic back-envs \
            --from-literal PREPROD_PORT=${{ secrets.PREPROD_PORT }} \
            --from-literal NGINX_STATIC_LOCATION=${{ secrets.NGINX_STATIC_LOCATION }} \
            --from-literal NEST_START_CMD=${{ secrets.NEST_START_CMD }} \
            --from-literal TYPEORM_HOST=${{ secrets.TYPEORM_HOST }} \
            --from-literal TYPEORM_PORT=${{ secrets.TYPEORM_PORT }} \
            --from-literal TYPEORM_USERNAME=${{ secrets.TYPEORM_USERNAME }} \
            --from-literal TYPEORM_PASSWORD=${{ secrets.TYPEORM_PASSWORD }} \
            --from-literal TYPEORM_DATABASE=${{ secrets.TYPEORM_DATABASE }} \
            --from-literal TYPEORM_RETRY_ATTEMPTS=${{ secrets.TYPEORM_RETRY_ATTEMPTS }} \
            --from-literal JWT_ACCESS_KEY=${{ secrets.JWT_ACCESS_KEY }} \
            --from-literal JWT_REFRESH_KEY=${{ secrets.JWT_REFRESH_KEY }} \
            --from-literal JWT_ACCESS_TTL=${{ secrets.JWT_ACCESS_TTL }} \
            --from-literal JWT_REFRESH_TTL=${{ secrets.JWT_REFRESH_TTL }} \
            --from-literal JWT_ISSUER=${{ secrets.JWT_ISSUER }}
            kubectl apply -f /srv/k8s

      # - name: Install PM2
      #   run: npm i pm2 --force

      # - name: Deploy
      #   run: |
      #     npm run deploy-preprod
