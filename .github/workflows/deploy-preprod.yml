name: CI - PREPROD-BACK
on:
  push:
    branches: [dev]

jobs:
  deploy:
    environment: preprod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$PREPROD_SSH_KEY" > ./deploy.key
          sudo chmod 600 ./deploy.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        shell: bash
        env:
          PREPROD_SSH_KEY: ${{secrets.PREPROD_SSH_KEY}}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Export environment variables
        run: |
          echo PREPROD_PORT="$PREPROD_PORT" > ./.env
          echo NGINX_STATIC_LOCATION="$NGINX_STATIC_LOCATION" >> ./.env
          echo NEST_START_CMD="$NEST_START_CMD" >> ./.env
          echo TYPEORM_HOST="$TYPEORM_HOST" >> ./.env
          echo TYPEORM_PORT="$TYPEORM_PORT" >> ./.env
          echo TYPEORM_USERNAME="$TYPEORM_USERNAME" >> ./.env
          echo TYPEORM_PASSWORD="$TYPEORM_PASSWORD" >> ./.env
          echo TYPEORM_DATABASE="$TYPEORM_DATABASE" >> ./.env
          echo TYPEORM_RETRY_ATTEMPTS="$TYPEORM_RETRY_ATTEMPTS" >> ./.env
          echo JWT_ACCESS_KEY="$JWT_ACCESS_KEY" >> ./.env
          echo JWT_REFRESH_KEY="$JWT_REFRESH_KEY" >> ./.env
          echo JWT_ACCESS_TTL="$JWT_ACCESS_TTL" >> ./.env
          echo JWT_REFRESH_TTL="$JWT_REFRESH_TTL" >> ./.env
          echo JWT_ISSUER="$JWT_ISSUER" >> ./.env
        env:
          PREPROD_PORT: '${{ secrets.PREPROD_PORT }}'
          NGINX_STATIC_LOCATION: '${{ secrets.NGINX_STATIC_LOCATION }}'
          NEST_START_CMD: '${{ secrets.NEST_START_CMD }}'
          TYPEORM_HOST: '${{ secrets.TYPEORM_HOST }}'
          TYPEORM_PORT: '${{ secrets.TYPEORM_PORT }}'
          TYPEORM_USERNAME: '${{ secrets.TYPEORM_USERNAME }}'
          TYPEORM_PASSWORD: '${{ secrets.TYPEORM_PASSWORD }}'
          TYPEORM_DATABASE: '${{ secrets.TYPEORM_DATABASE }}'
          TYPEORM_RETRY_ATTEMPTS: '${{ secrets.TYPEORM_RETRY_ATTEMPTS }}'
          JWT_ACCESS_KEY: '${{ secrets.JWT_ACCESS_KEY }}'
          JWT_REFRESH_KEY: '${{ secrets.JWT_REFRESH_KEY }}'
          JWT_ACCESS_TTL: '${{ secrets.JWT_ACCESS_TTL }}'
          JWT_REFRESH_TTL: '${{ secrets.JWT_REFRESH_TTL }}'
          JWT_ISSUER: '${{ secrets.JWT_ISSUER }}'


      - name: build project
        run: |
          npm i
          npm run build

      - name: build back image
        run: docker build -t mo29172/unionista_back -f ./docker/back/Dockerfile ./

      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      
      - name: send back image to docker hub
        run: |
          docker push mo29172/unionista_back:latest

      - name: build nginx image
        run: |
          docker build -t mo29172/unionista_nginx -f ./docker/nginx/Dockerfile ./
      - name: send nginx image to docker hub
        run: |
          docker push mo29172/unionista_nginx:latest

      - name: copy k8s files via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PREPROD_HOST }}
          username: ${{ secrets.PREPROD_USER }}
          key: ${{ secrets.PREPROD_SSH_KEY }}
          source: 'docker/k8s/nginx-node-port.yaml,docker/k8s/nginx-pod.yaml'
          target: '/srv/k8s'
          strip_components: 2

      - name: apply k8s files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PREPROD_HOST }}
          username: ${{ secrets.SSH_SECOND_USER }}
          password: ${{ secrets.PREPROD_PASSWORD }}
          script: |
            kubectl apply -f /srv/k8s/nginx-pod.yaml
            kubectl apply -f /srv/k8s/nginx-node-port.yaml


      # - name: Install PM2
      #   run: npm i pm2 --force

      # - name: Deploy
      #   run: |
      #     npm run deploy-preprod
